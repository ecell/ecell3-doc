  <!-- ================ Writing em ================================ -->

  <chapter id="write-em"> 
  <title>Writing a Model File in E-Cell Model format</title> 

  <highlights>
    <para>By reading this chapter, you may get information about:</para>
    
    <simplelist>
      <member>aaa</member>
    </simplelist>
  </highlights>


  <sect1>
    <title>What is E-Cell Model file?</title>

    <para>
      In &app, the standard file format of model description and
      exchange is XML-based EML (E-Cell Model description Language).
      Although EML is an ideal means of integrating E-Cell with other
      software components such as GUI model editors and databases, it
      is very tedious for human users who want to write and edit their
      models directly by text editors.  E-Cell Model (EM) is a file
      format with programming language-like syntax and a powerful
      embedded <application>empy</application> preprocessor, which is
      designed to be productive and intuitive especially when handled
      by the text editors and other text processing programs such as
      UNIX's <application>grep</application>,
      <application>diff</application> and
      <application>cat</application>.  Semantics of EM and EML files
      are almost completely equivalent to each other, and going
      between these two formats is meant to be possible with no loss
      of information (some exceptions are comments and directions to
      the preprocessor in EM).  The file suffix of EM files must be
      ".em".
    </para>

    <para>Although <application>E-Cell Modeling
    Environment</application> will provide means of more sophisticate,
    scalable and automated model construction on the basis of EML,
    learning syntax and semantics of EM may help you get the idea of
    how object model inside &ecell is organized and how it is driven
    to conduct simulations.  Furthermore, owing to the nature of plain
    programming language-like syntax, EM can be used as a simple and
    intuitive tool to communicate with other &ecell users.</para>


    </sect1>


  <sect1>
    <title>Basic Concepts</title>

    <sect2>
      <title><classname>Entity</classname> Objects for Cell Model Construction</title>
      <para></para>

    <sect3>
      <title><emphasis>FullID</emphasis>, <emphasis>FullPN</emphasis>, and <emphasis>SystemPath</emphasis></title>

      <para></para>

    </sect3>


    </sect2>


    <sect2>
      <title><classname>Stepper</classname> Objects for Defining Simulation Procedures</title>

      <para></para>
    </sect2>


    <sect2>
      <title>Properties of <classname>Entity</classname> and <classname>Stepper</classname> objects</title>


      <para><emphasis>property_value</emphasis> can be one of  (this should be a table, not a list)

<itemizedlist>
	  <listitem>
	    <para>Real number (ex. 3.33e+10, 1.0)</para>
	  </listitem>
	  <listitem>
	    <para>Int number  (ex. 3, 100)</para>
	  </listitem>
	  <listitem>
	    <para>String (ex. C10:A)</para>
	  </listitem>
	  <listitem>
	    <para>Quoted string (ex. "[EC35.3.33]+30")</para>
	  </listitem>
	  <listitem>
	    <para>List of items consists of above types of elements.  This list
can be nested. 
(ex. [ A 10 [ 1 1.0 1e+10 ] ] )
</para>
	  </listitem>
	</itemizedlist>


</para>

    </sect2>

</sect1>


    <sect1>
      <title>general structure</title>
    

    <para></para>



    <sect2>
      <title></title>


    <programlisting>
Stepper [ClassName] ( ID )
"docstring"
{ 
        property_name1 property_value1 ;
        property_name2 property_value2 ;
        ...
        property_namen property_valuen ;
} 

System [ClassName] ( SystemPath )
{ 
        property_name1 property_value1 ;
        property_name2 property_value2 ;
        ...
        property_namen property_valuen ;

        Variable [ClassName] ( ID )
        { 
                property_name1 property_value1 ;
                property_name2 property_value2 ;
                ...
                property_namen property_valuen ;
        } 

        Process [ClassName] ( ID )
        { 
                property_name1 property_value1 ;
                property_name2 property_value2 ;
                ...
                property_namen property_valuen ;
        } 

} 
</programlisting>

    <para>where <emphasis>ObjectType</emphasis> is one of:

      <itemizedlist>
	  <listitem>
	    <para><classname>Stepper</classname></para>
	  </listitem>

	  <listitem>
	    <para><classname>Variable</classname></para>
	  </listitem>

	  <listitem>
	    <para><classname>Process</classname></para>
	  </listitem>

	  <listitem>
	    <para><classname>System</classname></para>
	  </listitem>
	</itemizedlist>


    </para>
      
      <para><emphasis>ID</emphasis> is
      <classname>SystemPath</classname> for System definitions, and ID
      string for other <emphasis>ObjectType</emphasis>s</para>




      <example>
	<title>simple 'Toy Pathway' model</title>

	<programlisting>

Stepper Euler1Stepper( SRM_01 ) 
{ 
        # no property 
} 
 
System System( / ) 
{ 
        StepperID       SRM_01; 
        Volume  0.000000000000001; 
} 
 
System System( /CELL ) 
{ 
        StepperID       SRM_01; 
        Volume  1e-18;
} 
 
System System( /CELL/CYTOPLASM ) 
{ 
        StepperID       SRM_01; 
        Volume  1e-18; 
 
        Variable Variable( S ) 
        { 
                Value   1000000; 
        } 
 
        Variable Variable( P ) 
        { 
                Value   0; 
        } 
 
        Variable Variable( E ) 
        { 
                Value   1000; 
        } 
 
        Process MichaelisUniUniProcess( E ) 
        { 
                VariableReferenceList   [ S0 Variable:/CELL/CYTOPLASM:S -1 ]  
                                        [ P0 Variable:/CELL/CYTOPLASM:P 1 ]  
                                        [ C0 Variable:/CELL/CYTOPLASM:E 0 ]; 
                KmS     1; 
                KcF     10; 
        } 
 
} 
 
#target /CELL/CYTOPLASM; 
 
#/MT0  -> /MT0 
#MT0   -> /CELL/CYTOPLASM/MT0 
#Reatant S0 .:S -1; 
#Reatant S0 ../CYTOPLASM1:S -1; 
 
	</programlisting> 
      </example> 

      <example>
	<title>Another example</title>


	<programlisting>

Stepper Euler1Stepper ( SRM_01 ) 
{ 
# no property 
} 
 
System CompartmentSystem ( / ) 
{ 
        Name "ENVIRONMENT"; 
        Stepper SRM_01; 
        Volume  1.0E-15; 
} 
 
System CompartmentSystem ( /CELL )  
{ 
        Name "CELL"; 
        Stepper SRM_01; 
        Volume  unknown; 
} 
 
System CompartmentSystem ( /CELL/CYTOPLASM ) 
{ 
        Name "CYTOPLASM"; 
        Stepper SRM_01; 
        Volume  1.0E-18; 
 
        Substance Substance ( S ) 
        { 
                Name "S"; 
                Quantity 1000000; 
        } 
 
        Substance Substance ( P ) 
        { 
                Name "P"; 
                Quantity 0; 
        } 
 
        Substance Substance ( E ) 
        { 
                Name "E"; 
                Quantity 1000; 
        } 
 
 
#/MT0  -> /MT0 
#MT0   -> /CELL/CYTOPLASM/MT0 
#Reatant S0 .:S -1; 
#Reatant S0 ../CYTOPLASM1:S -1; 
 
        Reactor MichaelisUniUniReactor ( R ) 
        { 
                Name "R"; 
                VariableReferenceList [S0 S -1] 
                                      [P0 P 1] 
                                      [E0 ./E 0]; 
 
                KmS 1; 
                KcF 10; 
        } 
 
} 
 
System System ( /CELL/MEMBRANE ) 
{ 
        Name "MEMBRANE"; 
        Stepper SRM_01; 
        Volume  unknown; 
} 

</programlisting>
      </example>

    </sect2>

    </sect1>




  </chapter>


<!--
Local Variables:
mode: sgml
sgml-parent-document: ("ecell3-users-manual.xml" "book" "chapter")
End:
-->

