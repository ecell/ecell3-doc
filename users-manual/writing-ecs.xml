<!-- ============= Automating Simulation Sessions with ECS ========== -->
<chapter id="writing-ecs"> 
  <title>Automating Simulation Sessions with &ecell Session Script</title> 

  <highlights>
    <para>By reading this chapter, you can get information about the
    following items:
      <simplelist>
	<member>What is &ecell Session Script (<acronym>ESS</acronym>).</member>

	<member>How to automate the simulation by writing the
          <acronym>ESS</acronym> files.</member>

	<member>How to run &ecell in scripting mode.</member>

        <member>How to customize existing frontend software components.</member>
	<member>How to write a new frontend program to &ecell&.</member>

      </simplelist>
</para>
  </highlights>

  <sect1>
    <title>What is &ecell Session Script?</title>

    <para>need description here.</para>

  </sect1>


  


  <sect1>
    <title>Running &ecell Session Script</title>

    <para>There are roughly three ways to execute <acronym>ESS</acronym>;

      <itemizedlist>
	<listitem>
	  <para>Execute the script from operating system's command
	  line (shell prompt).
          </para>
	</listitem>
	<listitem>
	  <para>Load the script from a frontend software such as Osogo
	  Session Monitor.</para>
	</listitem>
	<listitem>
	  <para>Use SessionManager to automate the invokation of the
	  simulation sessions, as well as the generation of the <acronym>ESS</acronym>
	  itself, for simulations involving multiple runs of the
	  simulator.</para>
	</listitem>

      </itemizedlist>
    </para>

    <sect2>
      <title>Running the <acronym>ESS</acronym> in command line mode</title>

      <para>To run a <acronym>ESS</acronym> in command line, use
      <command>ecell3-session</command> command.
      </para>

      <cmdsynopsis>
	<command>ecell3-session</command>
	<arg><replaceable>file.ess</replaceable></arg>
      </cmdsynopsis>

      
      <sect3>
	<title>In batch mode</title>
	

	<para>
	To execute a <acronym>ESS</acronym> file, type the following
	command at the shell prompt:

        <screen>
          <userinput>
            <command>ecell3-session</command> <replaceable>filename.ess</replaceable>
          </userinput>
        </screen>

        <command>ecell3-session</command> command loads the
        <acronym>ESS</acronym> file and runs a single simulation
        session as described in the file.
      </para>

      </sect3>

      <sect3>
	<title>In interactive mode</title>
	<para>??? - is this possible?</para>
      </sect3>

      <sect3>
	<title>Giving parameters to the script</title>
	<para>not implemented yet</para>
      </sect3>


    </sect2>

    <sect2>
      <title>Loading <acronym>ESS</acronym> from Osogo Session Monitor</title>

      <para>need explanation here, or just say see osogo's manual?</para>

    </sect2>


    <sect2>
      <title>Using SessionManager</title>

      <para>need description here.</para>

    </sect2>

  </sect1>

  <sect1>
    <title>Writing &ecell Session Script</title>

    <para>The syntax of <acronym>ESS</acronym> is a full set of
    <productname>Python</productname> script with some convenient
    features.</para>

    <sect2>
      <title>Using Session methods</title>


    <para>In <acronym>ESS</acronym>, methods defined in
    <classname>Session</classname> class, or Session API, can be used.
    For example, to run the simulation for 10 seconds, you may use
    <methodname>run</methodname> method of a
    <classname>Session</classname> object in your
    <acronym>ESS</acronym> file.

    <informalexample> 
	<programlisting>self.run( 10 )</programlisting>
    </informalexample> 

    where <methodname>self.</methodname> is the current
    <classname>Session</classname> object given by the system.
    </para>

    <para>Unlike usual <productname>Python</productname> script, you
    have no need to specify the object on which the method is called
    if the object is the current <classname>Session</classname>.  
    Thus <methodname>self.</methodname> can be ommited.
    <informalexample>
	<programlisting>run( 10 )</programlisting>
    </informalexample>
    </para>


    <example>
      <title>A simple <acronym>ESS</acronym> example.</title>

      <programlisting>
loadModel( 'simple.eml' )
run( 100 )
</programlisting>
    </example>

    </sect2>


    <sect2>
      <title>Using Stubs</title>

      <sect3>
	<title>What is Stub?</title>

	<para>Stub is a...</para>

	<para>Explanation of backend/frontend isolation may come here.</para>

      </sect3>

    </sect2>

  </sect1>


  <sect1>
    <title>List of methods commonly used in ESS</title>

    <para>This section provides full lists of methods implemented in
      classes in &ecell Python library which are commonly used in ESS.
      </para>


    <sect2>
      <title><classname>Session</classname> class</title>

      <para>Methods of <classname>Session</classname> class can be
      devided into the following five groups.</para>

      <itemizedlist>
	<listitem>
	  <para>Session methods</para>
	</listitem>
	<listitem>
	  <para>Simulation methods</para>
	</listitem>
	<listitem>
	  <para>Stepper methods</para>
	</listitem>
	<listitem>
	  <para>Entity methods</para>
	</listitem>
	<listitem>
	  <para>Logger methods</para>
	</listitem>
      </itemizedlist>


      <table pgwide='1' tocentry='1' frame='bottom' rowsep='0'>
	<title>Methods and properties of <classname>Session</classname> class</title>
	
	<tgroup cols="3">
	  <colspec colnum='1' colname='c1'/>
	  <colspec colnum='2' colname='c2'/>
	  <colspec colnum='3' colname='c3'/>
	  <thead>
	    <row>
	      <entry namest="c1" nameend='c2'>Synopsis</entry>
	      <entry>Return</entry>
	    </row>
	    <row>
	      <entry namest='c1' nameend='c3' align='left' rowsep='1'>Description</entry>	  </row>
	  </thead>
	  
	  <tbody>
	    
	    <!-- ============== Session Methods ==================== -->
	    <row>
	      <entry namest='c1' nameend='c3' align='center'rowsep='1'><emphasis>Session methods</emphasis></entry>
	    </row>



	    <!-- loadModel -->

	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>loadModel</methodname>( <parameter>file</parameter> )
</synopsis></entry>

	      <entry>None</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>Load an EML file, and create a cell model as described in the file.
</para>

<para><parameter>file</parameter> can be either a filename or a file object.
</para>

            </entry>
	    </row>

	    <!-- loadScript -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>loadScript</methodname>( <parameter>filename</parameter> )
</synopsis></entry>

	      <entry>None</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>Load a ESS file.  Usually this is not used in ESS.</para>

<para>FIXME: what happens then?  need to check if this can be called
recursively.
</para>

<para>FIXME: need to describe about the locals()</para>

            </entry>
	    </row>



	    <!-- print -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>print</methodname>( <parameter>message</parameter> )
</synopsis></entry>

	      <entry>None</entry>
	    </row>
	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>Print <parameter>message</parameter>.  By default the message is
printed to stdout.</para> 

<para>The way the message is handled can be changed by using
<methodname>setPrintMethod</methodname> method.  For example, GUI
frontend software may give a new print method to steal the message for
its message printing widget.</para></entry>
	    </row>


	    <!-- setLogMethod -->

	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>setPrintMethod</methodname>( <parameter>method</parameter> )
</synopsis></entry>

	      <entry>None</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>This method changes what happens when
<methodname>print</methodname> method is called.  
</para>

<para><parameter>method</parameter> must be a Python callable object
which takes just one string parameter.</para>

<para>See also: <methodname>print</methodname></para>
            </entry>
	    </row>

	    <!-- ============ Simulation Methods ================== -->

	    <row>
	      <entry namest='c1' nameend='c3' align='center' rowsep='1'>
<emphasis>Simulation methods</emphasis></entry>
	    </row>

	    <!-- getCurrentTime -->

	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>getCurrentTime</methodname>()
</synopsis></entry>

	      <entry>Simulator's current time as a <type>float</type></entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>This method returns the current time of the simulator.</para>
            </entry>
	    </row>


	    <!-- run -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>run</methodname>( <optional><parameter>sec</parameter></optional> )
</synopsis>
            </entry>

	      <entry>None</entry>

	    </row>
	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
	    <para>Run the simulation for <parameter>sec</parameter>
	    seconds.</para> <para>If <parameter>sec</parameter> is
	    omitted, this method will not return unless the event
	    checker object is set by using
	    <methodname>setEventChecker</methodname> and it returns
	    true.</para> 
            <para>See also:
	    <methodname>setEventChecker</methodname> and
	    <methodname>setEventHandler</methodname></para></entry>
	    </row>

	    <!-- setEventChecker -->

	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>setEventChecker</methodname>( <parameter>eventchecker</parameter> )
</synopsis></entry>

	      <entry>None</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>If the <emphasis>event checker</emphasis> and an <emphasis>event
handler</emphasis> are correctly set, and the
<methodname>run</methodname> method is called with or without time
duration, the simulator checks if the <emphasis>event
checker</emphasis> returns true once in <varname>n</varname>
simulation steps , where <parameter>n</parameter> is a positive
integer number set by using
<methodname>setEventCheckInterval</methodname> (default
<parameter>n</parameter>= 20 steps).  If it happens, the simulator
then calls the <emphasis>event handler</emphasis>.  If the
<emphasis>event handler</emphasis> called
<methodname>stop</methodname> method of
<classname>Session</classname>, the simulator stops before the next
iteration.  This is the only way to quit from simulation loop when
<methodname>run</methodname> is called without an argument.</para>

<para>This mechanism is used to implement, mainly but not limited to,
GUI frontend to <classname>Session</classname> efficiently and easily.</para>

<para><parameter>eventchecker</parameter> and <parameter>event
handler</parameter> must be Python callable objects.
<parameter>eventchecker</parameter> must return an object which can be
evaluated as either <constant>true</constant> or
<constant>false</constant>.</para>

<para>If either of the <emphasis>event checker</emphasis> and the
<emphasis>event handler</emphasis> is not set, both of them are never
called.</para></entry>
	    </row>


	    <!-- setEventCheckInterval -->

	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>setEventCheckInterval</methodname>( <parameter>n</parameter> )
</synopsis></entry>

	      <entry>None</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>See <methodname>setEventChecker</methodname>.</para>
<para>This method is NOT IMPLEMENTED YET.</para>
</entry>
	    </row>

	    <!-- setEventHandler -->

	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>setEventHandler</methodname>( <parameter>eventhandler</parameter> )
</synopsis></entry>

	      <entry>None</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>See <methodname>setEventChacker</methodname></para>
            </entry>
	    </row>



	    <!-- step -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>step</methodname>( <optional><parameter>numsteps</parameter></optional> )
</synopsis></entry>

	      <entry>None</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>Perform a step of simulation.  If the optional integer
<parameter>numsteps</parameter> parameter is given, the simulator
steps that number.</para>
            </entry>
	    </row>


	    <!-- step -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>stop</methodname>()</synopsis></entry>

	      <entry>None</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>Stop the simulation.  Usually this is called from the
<emphasis>event handler</emphasis>, or other methods called by the
<emphasis>event handler.</emphasis></para>
<para>See also: <methodname>setEventChacker</methodname>,
<methodname>setEventHandler</methodname></para>
            </entry>
	    </row>


	    <!-- initialize -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>initialize</methodname>()</synopsis></entry>

	      <entry>None</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>Do preparation of simulation.  Usually there is no need to call
this method because this is automatically called before executing
<methodname>step</methodname> and <methodname>run</methodname>.</para>
            </entry>
	    </row>

	    <!-- ============== Stepper methods ==================== -->
	    <row>
	      <entry namest='c1' nameend='c3' align='center'rowsep='1'><emphasis>Stepper methods</emphasis></entry>
	    </row>

	    <!-- getStepperList -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>getStepperList</methodname>()</synopsis></entry>

	      <entry>A Python <type>tuple</type> containing a list of
ID strings.</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>This method returns a Python <type>tuple</type> which contains
ID strings of <classname>Stepper</classname>
objects existing in the simulator.</para>
            </entry>
	    </row>

	    <!-- createStepperStub -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>createStepperStub</methodname>( <parameter>id</parameter> )</synopsis></entry>

	      <entry>A <classname>StepperStub</classname> object</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>This method returns a <classname>StepperStub</classname> object
bound to this <classname>Session</classname> object and the given
<parameter>id</parameter>.</para>
            </entry>
	    </row>



	    <!-- ============== Entity methods ==================== -->
	    <row>
	      <entry namest='c1' nameend='c3' align='center'rowsep='1'><emphasis>Entity methods</emphasis></entry>
	    </row>

	    <!-- getEntityList -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>getEntityList</methodname>( <parameter>entitytype</parameter>, <parameter>systempath</parameter> )</synopsis></entry>

	      <entry>A Python <type>tuple</type> containing a list of
	      <classname>FullID</classname> strings.</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>This method returns a Python <type>tuple</type> which contains
<classname>FullID</classname> strings of <classname>Entity</classname>
objects of <parameter>entitytype</parameter> existing in a
<classname>System</classname> pointed by
<parameter>systempath</parameter></para>

<para><parameter>entitytype</parameter> must be one of
<constant>VARIABLE</constant>, <constant>PROCESS</constant>, or
<constant>SYSTEM</constant> defined in ecell.ECS module.
<parameter>systempath</parameter> must be a valid
<emphasis>SystemPath</emphasis> string.</para>
            </entry>
	    </row>

	    <!-- createEntityStub -->
	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>createEntityStub</methodname>( <parameter>fullid</parameter> )</synopsis></entry>

	      <entry>an <classname>EntityStub</classname> object</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>This method returns an <classname>EntityStub</classname> object bound to this <classname>Session</classname> object and the given <parameter>fullid</parameter>.</para>
            </entry>
	    </row>


	    <!-- ============== Logger methods ==================== -->
	    <row>
	      <entry namest='c1' nameend='c3' align='center'rowsep='1'><emphasis>Logger methods</emphasis></entry>
	    </row>

	    <!-- createLoggerList -->

	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>getLoggerList</methodname>()</synopsis></entry>

	      <entry>A Python <type>tuple</type> containing a list of
<classname>FullPN</classname> strings.</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>This method returns a Python <type>tuple</type> which contains
<classname>FullPN</classname> strings of all the
<classname>Logger</classname> objects existing in the
simulator.</para>
            </entry>
	    </row>

	    <!-- createLoggerStub -->

	    <row>
	      <entry namest='c1' nameend='c2' align='left'>
<synopsis><methodname>createLoggerStub</methodname>( <parameter>id</parameter> )</synopsis></entry>

	      <entry>A <classname>LoggerStub</classname> object</entry>
	    </row>

	    <row>
	      <entry namest="c1" nameend='c3' rowsep='1'>
<para>This method returns a <classname>LoggerStub</classname> object
bound to this <classname>Session</classname> object and the given
<parameter>fullpn</parameter>.</para>

<para><parameter>fullpn</parameter> must be a valid
<classname>FullPN</classname> string.</para>
            </entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

    </sect2>



  </sect1>

  


</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("ecell3-users-manual.xml" "book" "chapter")
End:
-->

