  <!-- ================ Writing em ================================ -->

  <chapter id="modeling"> 
  <title>Modeling with &ecell;</title> 

  <highlights>
    <para>By reading this chapter, you can get information about:</para>
    
    <simplelist>
      <member>How an &ecell;'s simulation model is organized</member>
      <member>How to create the simulation model</member
      <member>How to write a model file in &EM; format</member>
    </simplelist>
  </highlights>


  <sect1>
    <title>Simulation Model of &ecell;</title>

    <para>
    &ecell;'s simulation model is fully object-oriented.  That is, the
    simulation model is actually a set of <emphasis>objects</emphasis>
    connected each other.  The objects have
    <emphasis>properties</emphasis>, which determine characteristics
    of the objects (such as a reaction rate constant if the object
    represent a chemical reaction) and the relationships between
    objects.
    </para>

    <sect2>
      <title>Objects in the Model</title>

      <para>A simulation model of &app; consists of the following types of objects.
<itemizedlist>
	  <listitem>
	    <para>Usually more than one &Entity; object</para>
	  </listitem>
	  <listitem>
	    <para>One or more &Stepper; object(s)</para>
	  </listitem>
	</itemizedlist>
&Entity; objects define the structure of the simulation model and represented phenomena (such
as chemical reactions) in the model. &Stepper; objects
implement specific simulation algorithms.
</para>
  </sect2>


    <sect2>
      <title>&Entity; objects</title>

      <para>
The &Entity; class has three subclasses:
<itemizedlist>
	  <listitem>
	    <para>&Variable</para> <para>This class of objects represent state
	  variables.  A &Variable; object holds a scalar real-number
	  value.  A set of values of all &Variable; objects in a
	  simulation model defines the state of the model at a certain
	  point in time.</para>
	  </listitem>
	  <listitem>
	    <para>&Process</para> <para>This class of objects
	  represent phenomena in the simulation model that result in
	  changes in the values of one or more &Variable; objects.
	  The way of change of the &Variable; values can be either
	  discrete or continuous.</para>
	  </listitem>
	  <listitem>
	    <para>&System</para> <para>This class of objects define
	  overall structure of the model.  A &System; object can
	  contain sets of these three types of &Entity;, &Variable;,
	  &Process;, and &System; objects.  A &System; can contain
	  other &System;s, and can form a tree-like structure.  
	  </para>
	  </listitem>
	</itemizedlist>
</para>
      <sect3>
	<title>Root &System;</title>
	<para>When a simulator instance is newly instantiated, 
	a subclass object of &System;,
	a <classname>CompartmentSystem</classname>, is created. This
	&System; is called the <emphasis>root &System</emphasis>.
</para>
      </sect3>


    </sect2>

    <sect2>
      <title>&Stepper; objects</title>

      <para>A model must have one or more &Stepper; object(s).  </para>

      <para>Each &Process; and &System; object must be connected with
      a &Stepper; object in the same model.  In other words, &Stepper;
      objects in the model have non-overlapping sets of &Process; and
      &System; objects.</para>
    </sect2>




    <sect2>
      <title>Identifiers</title>

      <para>&app; uses several types of identifier strings to specify
      an object, such as the &Entity; and &Stepper;, in a simulation
      model.</para>

      <sect3>
	<title>&ID; (<emphasis>StepperID</emphasis>)</title>

	<para>Every &Entity; and &Stepper; object has an
	&ID;.  An &ID; is a character string of
	arbitrary length starting from an alphabet or '_' with
	succeeding alphabet, numeric, and '_' characters.  &app treats
	&ID;s in a case-sensitive way.</para>

	<para>If an &ID; is used to indicate a &Stepper; object, it is
	called a <emphasis>Stepper ID</emphasis>.  An &ID; points to
	an &Entity; object is refered to as <emphasis>Entity
	ID</emphasis>, or just <emphasis>ID</emphasis>.</para>

	<para>(need EBNF here)</para>

	<informalexample>
	  <para>Examples: _P3, ATP, GlucoseKinase</para>
	</informalexample>

      </sect3>

      <sect3>
	<title>&SystemPath;</title>

	<para>The &SystemPath; identifies a &System; from the
	tree-like hierarchy of &System; objects in a simulation model.
	It has a form of &ID; strings joined by a character '/'
	(slash).  As a special case, the &SystemPath; of the root
	system is '/'. For instance, if there is a &System; 'A', and
	'A' has a subsystem 'B', a &SystemPath; '/A/B' specifies the
	&System; object 'B'.  It has three parts: (1) the root system
	('/'), (2) the &System; 'A' directly under the root system,
	and (3) the &System; 'B' just under 'A'.</para>

	<para>A &SystemPath can be relative.  That is, it can contain
	'.' and '..' to specify a current and a super (containing)
	&System;, respectively.  If a &SystemPath; is relative, it does
	not point at a &System; object unless a current &System; is
	given.</para>

	<informalexample>
	  <para>Examples: /A/B,  ../A, ., /CELL/ER1/../CYTOSOL</para>
	</informalexample>

      </sect3>

      <sect3>
	<title>&FullID;</title>

	<para>A &FullID; identifies a unique &Entity; object in a simulation
	model.  A &FullID; comprises three parts, (1) a
	<emphasis>Type</emphasis>, (2) a &SystemPath;, and (3) an
	&ID;, joined by a character ':' (colon).</para>

	<para>Type is one of the following class names:
<itemizedlist>
	    <listitem>
	      <para>&System;</para>
	    </listitem>
	    <listitem>
	      <para>&Process;</para>
	    </listitem>
	    <listitem>
	      <para>&Variable;</para>
	    </listitem>
	  </itemizedlist>
</para>

	<para>For example, the following &FullID; points to a &Process; object
of which &ID; is 'P', in the &System; 'CELL' directly under the root system.
<informalexample>
	    <programlisting>Process:/CELL:P</programlisting>
	  </informalexample>
</para>

      </sect3>

      <sect3>
	<title>&FullPN;</title>

	<para>&FullPN; specifies a unique
	<emphasis>property</emphasis> (see below) of an &Entity; object in the
	simulation model.  It has a form of a &FullID; and a name of a
	property joined by a character ':'.</para>

	<para>The following &FullPN; points to a 'Value' property of the &Variable; object 'Variable:/CELL:S'.
<informalexample>
	    <programlisting>Variable:/CELL:S:Value</programlisting>
	  </informalexample>
</para>
      </sect3>

    </sect2>



    <sect2>
      <title>Properties of &Entity; and &Stepper; Objects</title>

      <para>&Entity; and &Stepper; objects have
      <emphasis>properties</emphasis>.  Property is an attribute of a
      certain object associated with a name, which can be get and set.
      </para>

      <para>A value of a property has a <emphasis>type</emphasis>,
      which is one of:

<itemizedlist>
	  <listitem>
	    <para>&Real; number</para> 
	    <para>(ex. 3.33e+10, 1.0)</para>
	  </listitem>
	  <listitem>
	    <para>&Int; number</para>
	    <para>(ex. 3, 100)</para>
	  </listitem>
	  <listitem>
	    <para>&StringType;</para>

	    <para>&StringType; has two forms: quoted and not quoted.
	    A quoted &StringType; can contain any
	    <acronym>ASCII</acronym> characters except the quotation
	    characters (' or ").  If a &StringType is not quoted, it
	    can start with an alphabet character or '_', or '/', and
	    contain alphabets, numbers, '_', '/' and ':'.</para>

	    <para>Multi-line string support is currently under
	    development.</para>

	    <para>(ex. C10_A, "It can include spaces if double-quoted.", 'single-quote is available too, if you want to use "double-quotes" inside.')</para>
	  </listitem>

	  <listitem>
	    <para>List</para> <para>The list can contain &Real;,
	    &Int;, &StringType values. This list can also contain
	    other lists, that is, the list can be nested.  A list must
	    be surrounded by brackets ('[' and ']'), and the elements
	    must be separated by space characters.  In some cases
	    outermost brackets are omitted (such as in &EM; files, see below).</para>
	    <para>(ex. [ A 10 [ 1.0 "a string" 1e+10 ] ] )</para>
	  </listitem>
	</itemizedlist>
</para>

    </sect2>


  </sect1>


  <sect1>
    <title>E-Cell Model (&EM;) File Format</title>

    <sect2>
      <title>What is &EM;?</title>

      <para>
      In &app, the standard file format of model description and
      exchange is XML-based &EML; (E-Cell Model description Language).
      Although &EML; is an ideal means of integrating E-Cell with other
      software components such as GUI model editors and databases, it
      is very tedious for human users who want to write and edit their
      models directly by a text editor.  E-Cell Model (&EM;) is a file
      format with programming language-like syntax and a powerful
      embedded <application>empy</application> preprocessor, which is
      designed to be productive and intuitive especially when handled
      by the text editors and other text processing programs such as
      UNIX's <application>grep</application>,
      <application>diff</application> and
      <application>cat</application>.  Semantics of &EM; and &EML; files
      are almost completely equivalent to each other, and going
      between these two formats is meant to be possible with no loss
      of information (some exceptions are comments and directions to
      the preprocessor in &EM;).  The file suffix of &EM; files must be
      ".em".
    </para>

    <sect3>
      <title>Why and when use &EM;?</title>

      <para>Although <application>E-Cell Modeling
    Environment</application> will provide means of more sophisticate,
    scalable and automated model construction on the basis of &EML;,
    learning syntax and semantics of &EM; may help you get the idea of
    how object model inside &ecell is organized and how it is driven
    to conduct simulations.  Furthermore, owing to the nature of plain
    programming language-like syntax, &EM; can be used as a simple and
    intuitive tool to communicate with other &ecell users.</para>

    </sect3>

    </sect2>


  </sect1>



  <sect1>
    <title>general structure</title>
    

    <para></para>



    <sect2>
      <title></title>


      <programlisting>
Stepper [ClassName] ( ID )
"docstring"
{ 
        property_name1 property_value1 ;
        property_name2 property_value2 ;
        ...
        property_namen property_valuen ;
} 

System [ClassName] ( SystemPath )
{ 
        property_name1 property_value1 ;
        property_name2 property_value2 ;
        ...
        property_namen property_valuen ;

        Variable [ClassName] ( ID )
        { 
                property_name1 property_value1 ;
                property_name2 property_value2 ;
                ...
                property_namen property_valuen ;
        } 

        Process [ClassName] ( ID )
        { 
                property_name1 property_value1 ;
                property_name2 property_value2 ;
                ...
                property_namen property_valuen ;
        } 

} 
</programlisting>

      <para>where <emphasis>ObjectType</emphasis> is one of:

      <itemizedlist>
	  <listitem>
	    <para>&Stepper;</para>
	  </listitem>

	  <listitem>
	    <para>&Variable;</para>
	  </listitem>

	  <listitem>
	    <para>&Process;</para>
	  </listitem>

	  <listitem>
	    <para>&System;</para>
	  </listitem>
	</itemizedlist>


    </para>
      
      <para><emphasis>ID</emphasis> is
      &SystemPath; for &System; definitions, and ID
      string for other <emphasis>ObjectType</emphasis>s</para>




      <example>
	<title>simple 'Toy Pathway' model</title>

	<programlisting>

Stepper Euler1Stepper( SRM_01 ) 
{ 
        # no property 
} 
 
System System( / ) 
{ 
        StepperID       SRM_01; 
        Volume  0.000000000000001; 
} 
 
System System( /CELL ) 
{ 
        StepperID       SRM_01; 
        Volume  1e-18;
} 
 
System System( /CELL/CYTOPLASM ) 
{ 
        StepperID       SRM_01; 
        Volume  1e-18; 
 
        Variable Variable( S ) 
        { 
                Value   1000000; 
        } 
 
        Variable Variable( P ) 
        { 
                Value   0; 
        } 
 
        Variable Variable( E ) 
        { 
                Value   1000; 
        } 
 
        Process MichaelisUniUniProcess( E ) 
        { 
                VariableReferenceList   [ S0 Variable:/CELL/CYTOPLASM:S -1 ]  
                                        [ P0 Variable:/CELL/CYTOPLASM:P 1 ]  
                                        [ C0 Variable:/CELL/CYTOPLASM:E 0 ]; 
                KmS     1; 
                KcF     10; 
        } 
 
} 
 
#target /CELL/CYTOPLASM; 
 
#/MT0  -> /MT0 
#MT0   -> /CELL/CYTOPLASM/MT0 
#Reatant S0 .:S -1; 
#Reatant S0 ../CYTOPLASM1:S -1; 
 
	</programlisting> 
      </example> 

      <example>
	<title>Another example</title>


	<programlisting>

Stepper Euler1Stepper ( SRM_01 ) 
{ 
# no property 
} 
 
System CompartmentSystem ( / ) 
{ 
        Name "ENVIRONMENT"; 
        Stepper SRM_01; 
        Volume  1.0E-15; 
} 
 
System CompartmentSystem ( /CELL )  
{ 
        Name "CELL"; 
        Stepper SRM_01; 
        Volume  unknown; 
} 
 
System CompartmentSystem ( /CELL/CYTOPLASM ) 
{ 
        Name "CYTOPLASM"; 
        Stepper SRM_01; 
        Volume  1.0E-18; 
 
        Substance Substance ( S ) 
        { 
                Name "S"; 
                Quantity 1000000; 
        } 
 
        Substance Substance ( P ) 
        { 
                Name "P"; 
                Quantity 0; 
        } 
 
        Substance Substance ( E ) 
        { 
                Name "E"; 
                Quantity 1000; 
        } 
 
 
#/MT0  -> /MT0 
#MT0   -> /CELL/CYTOPLASM/MT0 
#Reatant S0 .:S -1; 
#Reatant S0 ../CYTOPLASM1:S -1; 
 
        Reactor MichaelisUniUniReactor ( R ) 
        { 
                Name "R"; 
                VariableReferenceList [S0 S -1] 
                                      [P0 P 1] 
                                      [E0 ./E 0]; 
 
                KmS 1; 
                KcF 10; 
        } 
 
} 
 
System System ( /CELL/MEMBRANE ) 
{ 
        Name "MEMBRANE"; 
        Stepper SRM_01; 
        Volume  unknown; 
} 

</programlisting>
      </example>

    </sect2>

  </sect1>




  </chapter>


<!--
Local Variables:
mode: sgml
sgml-parent-document: ("ecell3-users-manual.xml" "book" "chapter")
End:
-->

