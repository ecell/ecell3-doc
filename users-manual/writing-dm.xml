  <!-- ============= Creating New Object Classes ========================= -->
  <chapter id="create-new-class"> 
    <title>Creating New Object Classes By Writing Dynamic Module Definitions</title> 

    <highlights>
      <para>
      This section describes how to define your object classes for use
      in the simulation models by writing Dynamic Module definition
      (DM or .dm) files.
      </para>
    </highlights>

    <sect1>
      <title>About dynamic modules</title>

      <para>Dynamic module is a class, especially C++ class, which
      can be loaded and instantiated by the application.  &app uses
      this mechanism to provide users a very efficient way of defining
      and adding new classes to appear in simulation models without
      recompiling the whole system.
      </para>

      <para>

      </para>


    </sect1>

    <sect1>
      <title>Defining a new class</title>

      <para>In &app, subclasses of <classname>Process</classname>,
         <classname>Variable</classname>,
         <classname>System</classname> and
         <classname>Stepper</classname> classes can be dynamically
         loaded by the system.
      </para>

      <note>
	<para>
          Currently only subclasses of Process can be defined in form of
          DM files.   For creating new classes for other base classes,
          you have to write C++ source code directly.  This will be improved
          in future versions.
        </para>
      </note>


      <para>

      The DM files actually is a Python script in which variables are
      set and some methods are called. 
</para>



      <para>
      Variables/methods in the following list can be set/called.
</para>
      <variablelist>

	<title>List of common variables and methods available in DM file</title>
	<varlistentry>
	  <term>CLASSNAME</term>
	  
	  <listitem>
	    <para>The name of this class</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>BASECLASS</term>
	  <listitem>
	    <para>The name of the base class</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>PROPERTIES</term>
	  <listitem>
	    <para>The list of properties of this class.</para>
	  </listitem>
	</varlistentry>


	<varlistentry>
	  <term>defineMethod()</term>
	  <listitem>
	    <para>Defines a method such as <methodname>process</methodname> and
            <methodname>initialize</methodname>.
            </para>

	    <para>Synopsis: defineMethod( 'methodname', '''definition''' )

            </para>

	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>PUBLIC_AUX</term>
	  <listitem>
	    <para>The fragment of C++ code which is put in
	    <emphasis>public</emphasis> field.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>PROTECTED_AUX</term>
	  <listitem>
	    <para>The fragment of C++ code which is put in
	    <emphasis>protected</emphasis> field.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>PRIVATE_AUX</term>
	  <listitem>
	    <para>The fragment of C++ code which is put in
	    <emphasis>private</emphasis> field.</para>
	  </listitem>
	</varlistentry>


      </variablelist>


    </sect1>


    <sect1>
      <title>Defining a new Process class</title>

      <para>To define a new <classname>Process</classname> class, 
      at least <varname>CLASSNAME</varname>, <varname>BASECLASS</varname>
      must be set, and <methodname>process()</methodname> and 
      <methodname>initialize()</methodname> methods must be defined.
      </para>

      
      <example>
	<title>MichaelisUniUniProcess.dm</title>
	<programlisting>
CLASSNAME = 'MichaelisUniUniProcess'
BASECLASS = 'FluxProcess'
PROPERTIES = [('Real','KmS',0.0), ('Real','KcF',0.0)]

PROTECTED_AUX = '''
  VariableReference S0;
  VariableReference C0;
'''

defineMethod( 'initialize', '''
  S0 = getVariableReference( "S0" );
  C0 = getVariableReference( "C0" );
''' )

defineMethod( 'process', '''
  Real velocity( KcF );

  velocity *= C0.getVariable()->getValue();
  const Real S( S0.getVariable()->getConcentration() );
  velocity *= S;
  velocity /= ( KmS + S );

  setFlux( velocity );

''' )
</programlisting>
      </example>

    </sect1>

    

  </chapter>



<!--
Local Variables:
mode: sgml
sgml-parent-document: ("ecell3-users-manual.xml" "book" "chapter")
End:
-->
