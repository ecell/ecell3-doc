
  <chapter id="ecell3-stddmlib"> 
  <title>Standard Dynamic Module Library</title> 
  <highlights>
    <para>This chapter overviews:</para>
    <simplelist>
      <member>A incomplete list of classes available as the Standard
      Dynamic Module Library, and,</member> 
      <member>Some usage the classes in the Standard Dynamic Module Library.</member>
    </simplelist>
  </highlights>

    <para>This chapter briefly describes the Standard Dynamic Module Library
    distributed with &app;.  If the system is installed correctly, the
    classes provided by the library can be used without any special
    procedure.</para>

  <para>This chapter is not meant to be a complete reference.  To know
  more about the classes defined in the library, see the E-Cell3
  Standard Dynamic Module Library Reference Manual (under preparation).</para>

  <sect1>
    <title>Steppers</title>

    <para>There are three direct sub-classes of &Stepper;:
<simplelist>
	<member><classname>DifferentialStepper</classname></member>
	<member><classname>DiscreteEventStepper</classname></member>
	<member><classname>DiscreteTimeStepper</classname></member>
      </simplelist>
</para>
    
    <sect2>
      <title><classname>DifferentialSteppers</classname></title>

      <sect3>
	<title>General-purpose
	<classname>DifferentialStepper</classname> classes</title>

      <para>The following &Stepper; classes implement general-purpose
ordinary differential equation solvers.   Basically these classes must
work well with any simple continuous &Process; classes.</para>

	<itemizedlist>
	  <listitem>
	    <para><classname>ODE45Stepper</classname></para>
	    <para>This &Stepper; implements
	    Dormand-Prince 5(4)7M algorithm for ODE systems.</para>
	    <para>In most cases this &Stepper; is
	    the best general purpose solver for ODE models.</para>
	  </listitem>
	  <listitem>
	    <para><classname>ODE23Stepper</classname></para>
	    <para>This &Stepper; implements
	    Fehlberg 2(3) algorithm for ODE systems.</para> 

	    <para>Try this &Stepper; if other
	    part of the model has smaller timescales.  This
	    &Stepper; can be used for a
	    moderately stiff systems of differential equations.</para>
	  </listitem>
	  <listitem>
	    <para><classname>FixedODE1Stepper</classname></para>
	    <para>A <classname>DifferentialStepper</classname> without
	    adaptive stepsizing mechanism.  The solution of this
	    &Stepper; is the first order.</para>

	    <para>This stepper calls
	    <methodname>process</methodname>() method of each
	    &Process; just once in a single
	    step.</para>
	    <para>Although this
	    &Stepper; is not suitable for smooth
	    continuous systems of differential equations, the simplicity
	    of the algorithm is sometimes useful.</para>
	  </listitem>
	</itemizedlist>

      </sect3>

    </sect2>

    <sect2>
      <title>DiscreteEventSteppers</title>
      <para>

<itemizedlist>
	  <listitem>
	    <para>NRStepper</para> <para>An implementation of
	    Gillespie-Gibson algorithm with modification to enable
	    multi-stepper simulations.</para>

	    <para>This &Stepper; should be used
	    in combination with
	    <classname>GillespieProcess</classname>.</para>
	  </listitem>
	</itemizedlist>
</para>
    </sect2>

    <sect2>
      <title>DiscreteTimeStepper</title>

      <para>
<itemizedlist>
	  <listitem>
	    <para>DiscreteTimeStepper</para>
	  </listitem>
	</itemizedlist>
</para>

    </sect2>

  </sect1>


  <sect1>
    <title>&Process; classes</title>

    <sect2>
      <title>Continuous &Process; classes</title>

      <sect3>
	<title>Differential equation-based &Process; classes</title>

	<para>The following &Process; classes are straightforward
	implementations of differential equations, and can be used
	with the general-purpose
	<classname>DifferentialSteppers</classname> such as
	<classname>ODE45Stepper</classname>,
	<classname>ODE23Stepper</classname>, and
	<classname>FixedODE1Stepper</classname>.</para>

	<para>In the current version, most of the classes represent
certain reaction rate equations.  Of course it is not limited to
chemical and biochemical simulations.</para>

	<itemizedlist>
	<listitem>
	  <para><classname>CatalyzedMassActionFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>DecayFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>IsoUniUniFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>MassActionProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>MichaelisUniUniProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>MichaelisUniUniReversibleProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>OrderedBiBiFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>OrderedBiUniFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>OrderedUniBiFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>PingPongBiBiFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>RandomBiBiFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>RandomBiUniFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>RandomUniBiFluxProcess</classname></para>
	</listitem>
	</itemizedlist>

      </sect3>

      <sect3>
	<title>Other continuous &Process; classes</title>

	<itemizedlist>

	  <listitem>
	    <para><classname>PythonFluxProcess</classname></para>
	  </listitem>
	  <listitem>
	    <para><classname>SSystemProcess</classname></para>
	  </listitem>
	</itemizedlist>

      </sect3>

    </sect2>

    <sect2>
      <title>Discrete &Process; classes</title>

      <itemizedlist>
	<listitem>
	  <para><classname>GammaProcess</classname></para>
	  <para>Under development.</para>
	</listitem>
	<listitem>
	  <para><classname>GillespieProcess</classname></para>
	  <para>This &Process; must be used with a Gillespie-type &Stepper,
such as <classname>NRStepper</classname>.</para>
	</listitem>
	<listitem>
	  <para><classname>RapidEquilibriumProcess</classname></para>
	</listitem>
      </itemizedlist>

    </sect2>


    <sect2>
      <title>Other &Process; classes</title>


	<itemizedlist>
	  <listitem>
	    <para><classname>PythonProcess</classname></para>
	  </listitem>
	</itemizedlist>

    </sect2>
  </sect1>


  <sect1>
    <title>&Variable; classes</title>
    <para>
</para>


    <itemizedlist>
      <listitem>
	<para>Variable</para>
	<para>A standard class to represent a state variable.</para>
      </listitem>

    </itemizedlist>
  </sect1>

  </chapter>



<!--
Local Variables:
mode: sgml
sgml-parent-document: ("ecell3-users-manual.xml" "book" "chapter")
End:
-->
